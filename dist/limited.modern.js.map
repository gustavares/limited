{"version":3,"file":"limited.modern.js","sources":["../src/Vector.js","../src/GameObject.js","../src/Keyboard.js","../src/State.js","../src/Text.js","../src/Screen.js","../src/main.js","../src/SpriteSheet.js","../src/AnimationState.js"],"sourcesContent":["export default class Vector {\n    constructor({\n        x, y\n    }) {\n        this.x = x;\n        this.y = y;\n    }\n    plus(other) {\n        return new Vector({\n          x: this.x + other.x, \n          y: this.y + other.y\n        });\n      }\n}","import Vector from './Vector.js';\n\nexport default class GameObject {\n    constructor({\n        name,\n        type,\n        position,\n        width,\n        height,\n        color,\n        speed,\n        sprite\n    }) {\n        this.name = name;\n        this.type = type;\n        this.position = position || new Vector({ x: 0, y: 0 })\n        this.width = width;\n        this.height = height;\n        this.color = color;\n        this.speed = speed || new Vector({ x: 0, y: 0});\n        this.sprite = sprite;\n    }\n\n    getCenter() {\n        return new Vector({\n            x: this.position.x + this.width / 2,\n            y: this.position.y + this.height / 2\n        })\n    }\n\n    update(dt) {\n        this.position = new Vector({\n            x: this.position.x + (this.speed.x * dt),\n            y: this.position.y + (this.speed.y * dt)\n        });\n    }\n}","export const keyCodes = {\n    UP: 38,\n    DOWN: 40,\n    RIGHT: 39,\n    LEFT: 37,\n    W: 87,\n    A: 65,\n    S: 83,\n    D: 68,\n    SPACE: 32\n}\n\nexport default class Keyboard {\n    keyState = {};\n\n    constructor() { \n        window.addEventListener(\"keydown\", this.keyDownHandler);\n\n        window.addEventListener(\"keyup\", this.keyUpHandler);\n    }\n\n    keyDownHandler = (event) => {\n        event.preventDefault();\n        this.keyState[event.keyCode || event.which] = true;\n    }\n\n    keyUpHandler = (event) => {\n        event.preventDefault();\n        this.keyState[event.keyCode || event.which] = false;\n    }\n}\n","import GameObject from \"./GameObject.js\";\nimport Keyboard from \"./Keyboard.js\";\n\nexport default class State {\n\n    /**\n     * \n     * @param {{\n     *  gameObjects: GameObject[],\n     *  state: State\n     * }} param0 \n     */\n    constructor({ gameObjects, textObjects, state }) {\n        this.gameObjects = gameObjects;\n        this.textObjects = textObjects;\n        this.state = state;\n        this.keyboard = new Keyboard();\n    }\n\n    setGameObjects(go) {\n        this.gameObjects = go;\n    }\n\n    getGameObject(name) {\n        return this.gameObjects.find((go) => go.name === name);\n    }\n\n    getGameObjectsByType(type) {\n        return this.gameObjects.map((go) => go.type === type);\n    }\n\n    /**\n     * @returns {GameObject[]} gameObjects\n     */\n    getGameObjects() {\n        return this.gameObjects;\n    }\n\n    getTextObject(label) {\n        return this.textObjects.find((to) => to.label === label);\n    }\n\n    deleteTextObject(label) {\n        const index = this.textObjects.findIndex((to) => to.label === label);\n        \n        if (index !== -1) {\n            this.textObjects.splice(index, 1);\n        }\n    }\n\n    /**\n     * @param {number} dt \n     * @returns {State}\n     */\n    update(dt) {\n        this.gameObjects.forEach(go => go.update(dt));\n    }\n}","import Vector from \"./Vector.js\";\n\nexport default class Text {\n    /**\n     * \n     * @param {{\n     *  content: string\n     *  position: Vector\n     *  font: string\n     * label: string\n     * }} param0 \n     */\n    constructor({ content, label, position, font = '18px verdana' }) {\n        Object.assign(this, { content, label, position, font });\n    }\n\n    /**\n     * \n     * @param {CanvasRenderingContext2D} context \n     */\n    write(context) {\n        context.font = this.font;\n        context.fillText(this.content, this.position.x, this.position.y);\n    }\n\n    update(newContent) {\n        this.content = newContent;\n\n        return this;\n    }\n}","import GameObject from './GameObject.js';\nimport Text from './Text.js';\n\nexport default class GameScreen {\n    constructor({ canvasId, width, height }) {\n        this.canvas = document.getElementById(canvasId);\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.context = this.canvas.getContext('2d');\n        \n    }\n\n    clear() {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * \n     * @param {GameObject[]} currentGameObjects \n     * @param {GameObject[]} previousGameObjects \n     * @param {number} interpolation\n     */\n    renderObjects(currentGameObjects, previousGameObjects, interpolation) {\n\n        for (const object of currentGameObjects) {\n            const { name, width, height, color, sprite, currentAnimationStateName, position } = object;\n            let { x, y } = position;\n\n            if (name === undefined) throw Error('name not found');\n            if (x === undefined) throw Error('x not found');\n            if (y === undefined) throw Error('y not found');\n            if (width === undefined) throw Error('width not found');\n            if (height === undefined) throw Error('height not found');\n            if (color === undefined) throw Error('color not found');\n\n            if (previousGameObjects.length) {\n                const previousGo = previousGameObjects.find((go) => go.name === name);\n                if (previousGo) {\n                    const prevX = previousGo.position.x;\n                    const prevY = previousGo.position.y;\n\n                    x = x * interpolation + prevX * (1 - interpolation);\n                    y = y * interpolation + prevY * (1 - interpolation);\n                }\n            }\n\n        \n            if (sprite !== undefined) {\n               const spritePosition = sprite.getCurrentSpritePosition();\n               this.context.drawImage(sprite, spritePosition.x * width, spritePosition.y * height, sprite.width, sprite.height, x, y, width, height);\n            } else {\n                this.context.fillStyle = color;\n                this.context.fillRect(x, y, width, height);\n            }\n        }\n    }\n\n    /**\n     * \n     * @param {Text[]} texts \n     */\n    write(texts) {\n        for (const text of texts) {\n            text.write(this.context);\n        }\n    }\n}","import GameScreen from \"./Screen.js\";\nimport State from \"./State.js\";\nimport Text from './Text.js';\n\nconst\n    ONE_SECOND = 1000,\n    UPDATES_PER_SECOND = 60;\n\nconst settings = {\n    currentFps: 1,\n    framesThisSecond : 0,\n    lastFpsUpdate: 0,\n    decayRatio: 0.25,\n    MS_PER_UPDATE: Number((ONE_SECOND / UPDATES_PER_SECOND).toFixed(1))\n};\nexport let framesRendered = 0;\n\n/**\n * \n * @param {{\n *  firstState: State\n *  screen: GameScreen\n *  update: Function\n * }} param0 \n */\nexport function start({ firstState, screen, update }) {\n    const timeStep = settings.MS_PER_UPDATE;\n    \n    let lag = 0.0, \n        previousTime = window.performance.now();\n    let currentState = firstState; \n    let previousState;\n    \n    const gameLoop = (currentTime) => {\n        const elapsedTime = currentTime - previousTime;\n        previousTime = currentTime;\n        lag += elapsedTime;\n        \n        if (currentTime > settings.lastFpsUpdate + ONE_SECOND) {\n            /**\n             * Weighted moving average to calculate FPS\n             * https://gamedev.stackexchange.com/questions/141325/finding-average-input-value-over-time-in-seconds\n             * \n             * https://stackoverflow.com/questions/4687430/c-calculating-moving-fps\n             */\n            settings.currentFps = settings.decayRatio * settings.framesThisSecond + (1 - settings.decayRatio) * settings.currentFps;\n\n            settings.lastFpsUpdate = currentTime;\n            settings.framesThisSecond = 0;\n        }\n        settings.framesThisSecond++;\n\n        while (lag >= timeStep) {\n\n            previousState = currentState;\n            update({ state: currentState, dt: timeStep});\n            currentState.update(timeStep);\n            lag -= timeStep;\n        }\n\n        framesRendered++;\n        render(\n            screen,\n            { \n                currentState,\n                previousState,\n                texts: [\n                    new Text({ \n                        content: `FPS: ${Math.round(settings.currentFps)}`,\n                        position: { x: 1400, y: 30 },\n                        label: 'FPS'\n                    }),\n                    ...currentState.textObjects\n                ],\n                interpolation:  lag / settings.MS_PER_UPDATE\n            }\n        );\n\n        window.requestAnimationFrame(gameLoop);\n    };\n\n    gameLoop(window.performance.now());\n}\n\n/**\n * @param {{\n *  currentState: State\n *  previousState: State\n *  texts: Text[]\n *  interpolation: number\n * }} params\n */\nfunction render(screen, { currentState, previousState, interpolation, texts }) {\n    screen.clear();\n    screen.write(texts);\n\n    const previousGameObjects = previousState ? previousState.getGameObjects() : [];\n    screen.renderObjects(currentState.getGameObjects(), previousGameObjects, interpolation);\n}","import { framesRendered } from './main.js';\nconst STAGGER_FRAMES = 6;\n\nexport default class SpriteSheet extends Image {\n    constructor({\n        spriteSheetWidth,\n        spriteSheetHeight,\n        numberOfSprites,\n        maxSpritesPerRow,\n        numberOfRows,\n        currentAnimationStateName,\n        animationStates,\n        src\n    }) {\n        super(spriteSheetWidth/maxSpritesPerRow, spriteSheetHeight/numberOfRows);\n        this.maxSpritesPerRow = maxSpritesPerRow;\n        this.numberOfSprites = numberOfSprites;\n        this.numberOfRows = numberOfRows;\n        this.spriteSheetWidth = spriteSheetWidth;\n        this.spriteSheetHeight = spriteSheetHeight;\n        this.currentAnimationStateName = currentAnimationStateName;\n        this.animationStates = animationStates;\n        this.src = src;\n    }\n\n    getCurrentSpritePosition() {\n        const currentStateIndex = this.animationStates.findIndex((state) => state.name === this.currentAnimationStateName);\n        const currentState = this.animationStates[currentStateIndex];\n        \n        // todo: if the animation just started should render from the first sprite in the animation sequence\n        const currentAnimationFrame = Math.floor(framesRendered/STAGGER_FRAMES) % currentState.numberOfFrames;\n\n        return {\n            x: currentAnimationFrame,\n            y: currentStateIndex\n        }\n    }\n}","export default class AnimationState {\n    constructor({\n        name, \n        numberOfFrames\n    }) {\n        this.name = name;\n        this.numberOfFrames = numberOfFrames;\n    }\n}"],"names":["Vector","constructor","x","y","this","plus","other","GameObject","name","type","position","width","height","color","speed","sprite","getCenter","update","dt","keyCodes","UP","DOWN","RIGHT","LEFT","W","A","S","D","SPACE","Keyboard","keyState","keyDownHandler","event","preventDefault","keyCode","which","keyUpHandler","window","addEventListener","State","gameObjects","textObjects","state","keyboard","setGameObjects","go","getGameObject","find","getGameObjectsByType","map","getGameObjects","getTextObject","label","to","deleteTextObject","index","findIndex","splice","forEach","Text","content","font","Object","assign","write","context","fillText","newContent","GameScreen","canvasId","canvas","document","getElementById","getContext","clear","clearRect","renderObjects","currentGameObjects","previousGameObjects","interpolation","object","undefined","Error","length","previousGo","spritePosition","getCurrentSpritePosition","drawImage","fillStyle","fillRect","texts","text","settings","currentFps","framesThisSecond","lastFpsUpdate","decayRatio","MS_PER_UPDATE","Number","toFixed","framesRendered","start","firstState","screen","timeStep","previousState","lag","previousTime","performance","now","currentState","gameLoop","currentTime","elapsedTime","render","Math","round","requestAnimationFrame","SpriteSheet","Image","spriteSheetWidth","spriteSheetHeight","numberOfSprites","maxSpritesPerRow","numberOfRows","currentAnimationStateName","animationStates","src","super","currentStateIndex","floor","numberOfFrames","AnimationState"],"mappings":"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"}